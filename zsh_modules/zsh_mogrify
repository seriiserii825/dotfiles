alias mg='mogrify -format jpg *.png'

# Optimize: PNG -> JPG (mogrify), then jpegoptim for all JPGs
function mgjpg() {
  printf "Enter quality (default 85): "
  read -r quality

  # default BEFORE validation
  [ -z "$quality" ] && quality=85

  # numeric check
  case "$quality" in
    *[!0-9]* ) echo "Invalid quality value. Please enter a number between 0 and 100."; return 1 ;;
  esac
  # range check
  if [ "$quality" -lt 0 ] || [ "$quality" -gt 100 ]; then
    echo "Quality must be between 0 and 100."
    return 1
  fi

  # convert PNG -> JPG only if PNGs exist
  if find . -maxdepth 1 -type f \( -iname '*.png' \) | grep -q .; then
    mogrify -format jpg ./*.png || return 1
    rm ./*.png
  fi

  # optimize JPGs if they exist
  if find . -maxdepth 1 -type f \( -iname '*.jpg' -o -iname '*.jpeg' \) | grep -q .; then
    # -p preserve timestamps, -t totals, -m <q>
    find . -maxdepth 1 -type f \( -iname '*.jpg' -o -iname '*.jpeg' \) -print0 \
      | xargs -0 jpegoptim --strip-all --all-progressive -pt -m "$quality"
  else
    echo "No JPG/JPEG files found."
  fi
}

# Optimize existing JPGs only
function jall() {
  printf "Enter quality (default 85): "
  read -r quality

  [ -z "$quality" ] && quality=85

  case "$quality" in
    *[!0-9]* ) echo "Invalid quality value. Please enter a number between 0 and 100."; return 1 ;;
  esac
  if [ "$quality" -lt 0 ] || [ "$quality" -gt 100 ]; then
    echo "Quality must be between 0 and 100."
    return 1
  fi

  if find . -maxdepth 1 -type f \( -iname '*.jpg' -o -iname '*.jpeg' \) | grep -q .; then
    find . -maxdepth 1 -type f \( -iname '*.jpg' -o -iname '*.jpeg' \) -print0 \
      | xargs -0 jpegoptim --strip-all --all-progressive -pt -m "$quality"
  else
    echo "No JPG/JPEG files found."
  fi
}

function showSizes(){
  find . -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) \
    -exec identify -format "%f | %wx%h\n" {} \; | sort | column -t -s'|'
  }

function removeSpaces(){
  perl-rename 's/ /-/g' *
  perl-rename 's/----/-/g' *
  perl-rename 's/---/-/g' *
  perl-rename 's/--/-/g' *
}

JPGTOjpg() {
  for I in *.JPG; 
  do mv "$I" `echo "$I" | sed "s/JPG/jpg/g"`;done
  echo "All JPG files have been converted to jpg."
}

