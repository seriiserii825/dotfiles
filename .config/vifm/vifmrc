source ~/xubuntu/vifm/favicons.vifm


mark b ~/Documents/Sites/wp-projects/bs-vite
mark l ~/Sites/local
mark d ~/Downloads/
mark D ~/Documents/
mark C ~/Documents/Courses
mark S ~/Sites/
mark x ~/xubuntu/
mark f ~/Documents/my-fonts
mark F ~/Documents/html/frontend-template
mark A ~/Documents/html/admin-template
mark M /mnt

set vicmd=nvim
set syscalls
set trash
set vifminfo=dhistory,savedirs,chistory,state,tui,tabs,shistory,ehistory,
            \phistory,fhistory,dirstack,registers,bookmarks,bmarks,mchistory
set history=100
set nofollowlinks
set sortnumbers
set undolevels=100
set vimhelp
set norunexec
colorscheme dracula
set timefmt='%Y/%m/%d %H:%M'
set wildmenu
set wildstyle=popup
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers
set ignorecase
set smartcase
set nohlsearch
set incsearch
set scrolloff=4
if !has('win')
    set slowfs=curlftpfs
endif
if !has('win')
    set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "
else
    set statusline="  Hint: %z%= %A %15s %20d  "
endif
if system("find --version | grep -c 'GNU findutils'") != 0
    set findprg='find %s %a -print , -type d \( ! -readable -o ! -executable \) -prune'
endif
set grepprg="grep -n -H -I -r -s %i %a %s"
mark b ~/bin/
mark h ~/
command ln ln -s %f:p %D
command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %c.zip %f
command! unzip unzip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart full
command! sl :select {%a}
command! sxd sxiv -tr %d
command! sx sxiv %c
command! dd :rm -rf %f
filextype {*.pdf},<application/pdf> zathura %c %i, apvlv %c, xpdf %c
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -
filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i,
filextype {*.djvu},<image/vnd.djvu>
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,
filetype {*.mid,*.kar}
       \ {Play using TiMidity++}
       \ timidity %f,
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
         \*.aac,*.mpga},
        \<audio/*>
       \ {Play using MPlayer}
       \ mplayer %f,
       \ {Play using mpv}
       \ mpv --no-video %f %s,
       \ {Play using ffplay}
       \ ffplay -nodisp -hide_banner -autoexit %c,
fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
           \*.aac,*.mpga},
          \<audio/*>
         \ ffprobe -hide_banner -pretty %c 2>&1
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx],*.unknown_video},
         \<video/*>
        \ {View using ffplay}
        \ ffplay -fs -hide_banner -autoexit %f,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ smplayer %f,
        \ {Play using mpv}
        \ smplayer %f,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx],*.unknown_video},
          \<video/*>
         \ ffprobe -hide_banner -pretty %c 2>&1
filextype {*.xhtml,*.html,*.htm},<text/html>
        \ {Open with qutebrowser}
        \ qutebrowser %f %i,
        \ {Open with firefox}
        \ firefox %f &,
filetype {*.xhtml,*.html,*.htm},<text/html> links, lynx
filetype {*.o},<application/x-object> nm %f | less
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b
filextype {*.svg,*.svgz},<image/svg+xml>
        \ {Edit in Inkscape}
        \ inkscape %f,
        \ {View in Inkview}
        \ inkview %f,
filextype {*.cr2}
        \ {Open in Darktable}
        \ darktable %f,
        \ {Open in RawTherapee}
        \ rawtherapee %f,
filextype {*.xcf}
        \ {Open in GIMP}
        \ gimp %f,
filextype {*.kra}
        \ {Open in Krita}
        \ krita %f,
filextype {*.blend}
        \ {Open in Blender}
        \ blender %c,
filextype {*.sh3d}
        \ {Open in Sweet Home 3D}
        \ sweethome3d %c:p,
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
        \ {View in sxiv}
        \ sxiv %f,
        \ {View in gpicview}
        \ gpicview %c,
        \ {View in shotwell}
        \ shotwell,
fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
         \ identify %f
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,
filetype {*.torrent},<application/x-bittorrent> ktorrent %f &
fileviewer {*.torrent},<application/x-bittorrent>
         \ dumptorrent -v %c,
         \ transmission-show %c
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
        \<application/zip,application/java-archive>
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ unzip -l %f | less,
       \ {Extract here}
       \ unzip %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt unzip -l %f
filetype {*.cpio,*.cpio.gz,*.rpm,*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,
         \*.txz,*.tar.zst,*.tzst},
        \<application/x-cpio,application/x-rpm,application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.xz,*.txz tar -tJf %c
fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
fileviewer {*.tar},<application/x-tar> tar -tf %c
fileviewer {*.cpio},<application/x-cpio> cpio -t < %c
fileviewer {*.rpm},<application/x-rpm> rpm -q --list %c%q 2> /dev/null
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -
filetype *.tudu tudu -f %c
filextype *.pro qtcreator %f &
filextype */
        \ {View in thunar}
        \ Thunar %f &,
nnoremap s :shell<cr>
nnoremap S :sort<cr>
nnoremap w :view<cr>
vnoremap w :view<cr>gv
nnoremap gb :file &<cr>l
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:p:gs!\!/! %i | clip<cr>
elseif $WAYLAND_DISPLAY != ''
    if executable('wl-copy')
        " Yank current directory path into primary and selection clipboards
        nnoremap yd :!echo -n %d | wl-copy %i &&
                    \ echo -n %d | wl-copy -p %i<cr>
        " Yank current file path into into primary and selection clipboards
        nnoremap yf :!echo -n %c:p | wl-copy %i &&
                    \ echo -n %c:p | wl-copy -p %i<cr>
    endif
elseif $DISPLAY != ''
    if executable('xclip')
        " Yank current directory path into the clipboard
        nnoremap yd :!echo -n %d | xclip -selection clipboard %i<cr>
        " Yank current file path into the clipboard
        nnoremap yf :!echo -n %c:p | xclip -selection clipboard %i<cr>
    elseif executable('xsel')
        " Yank current directory path into primary and selection clipboards
        nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                    \ echo -n %d | xsel --clipboard --input %i<cr>
        " Yank current file path into into primary and selection clipboards
        nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                    \ echo -n %c:p | xsel --clipboard --input %i<cr>
    endif
endif

" Start shell in current directory
nnoremap s :shell<cr>
nnoremap zi :zip
nnoremap H :history<cr>

" Video
nnoremap os :!smplayer %f &<CR>

" window
nnoremap q :q<cr>
nnoremap wq :wq<cr>

nnoremap uz :unzip<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in existing instance of gvim
nnoremap on :!nvim %c<cr>
nnoremap b :!google-chrome-stable %c<cr>
" Open file in new instance of gvim
nnoremap O :!nvim %f<cr>
"command! open :!%a %%c :nnoremap o :open<space>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

nnoremap <tab> <space> 
nnoremap <space> tj

" toggle hidden files
nnoremap . za

" filter files
nnoremap F :filter<space>
nnoremap f :filter! <space>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw
nnoremap r cW

" make files dir
nnoremap cf :touch<space>
nnoremap cd :mkdir<space>

" All Selected
nnoremap as ggVG<cr>
" Invert Selection
nnoremap is :invert s<cr>

" Swap panes
nnoremap <c-u> <c-w>x
nnoremap x :sync<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    " nnoremap yp :!echo %"d:gs!\!/! %i | xclip %i<cr>:echo expand('%"c') "is yanked to clipboard"<cr>
    " nnoremap yd :!echo %d | xclip %i<cr>:echo expand('%"c') "is yanked to clipboard"<cr>
    nnoremap yd :!echo -n %d | xclip -selection clipboard %i<cr>:echo expand('%"d') "is yanked to clipboard"<cr>
    nnoremap yf :!echo -n %c:p | xclip -selection clipboard %i<cr>:echo expand('%"c:p') "is yanked to clipboard"<cr>
    " Yank current file path into the clipboard
    " nnoremap yf :!echo %c:p | xclip-selection clipboard %i<cr>:echo expand('%"c') "is yanked to clipboard"<cr> 
    " yank file name with extension to clipboard
    nnoremap yn :!echo -n %c | xclip -selection clipboard %i<cr>:echo expand('%"c') "is yanked to clipboard"<cr>
    " yank file name without extension to clipboard
    nnoremap yN :!echo -n %c:r | xclip -selection clipboard %i<cr>:echo expand('%"c:r') "is yanked to clipboard"<cr>
" elseif executable('xsel')
"     " Yank current directory path into primary and selection clipboards
"     nnoremap yd :!echo -n %d | xsel --input --primary %i &&
"                 \ echo -n %d | xsel --clipboard --input %i<cr>
"     " Yank current file path into into primary and selection clipboards
"     nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
"                 \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif


" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype {*.pdf},<application/pdf> zathura %c %i &, apvlv %c, xpdf %c
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

" PostScript
filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

filextype {*.ts},
        \ {View in nvim}
        \ nvim %f,

filextype {*.vue},
        \ {View in nvim}
        \ nvim %f,

" Djvu
filextype {*.svg},
        \ {View in chrome}
        \ google-chrome-stable %f,
        \ {View in nvim}
        \ nvim %f,
        \ {View in sxiv}
        \ sxiv %f,

" Djvu
filextype {*.djvu},<image/vnd.djvu>
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
        \<audio/*>
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {Play using MPlayer}
       \ mplayer %f,
fileviewer {*.mp3},<audio/mpeg> mp3info
fileviewer {*.flac},<audio/flac> soxi

" Video
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]},
         \<video/*>
        \ {View using ffplay}
        \ ffplay -fs -autoexit %f,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ smplayer %f,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx]},
          \<video/*>
         \ ffprobe -pretty %c 2>&1

" Web
filextype {*.html,*.htm},<text/html>
        \ {Open with nvim}
        \ nvim %f,
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with chrome}
        \ google-chrome-stable %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,
filetype {*.html,*.htm},<text/html> links, lynx

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" Images
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,*.ico
        \ {View in sxiv}
        \ sxiv -ia %f &,
        \ {View in imv}
        \ imv -b 1D2330 -d %d &,
        \ {View in feh}
        \ feh %d &,
        \ {View in cacaview}
        \ cacaview %c &,
fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.xpm,*.ico
        \ vifmimg draw %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear
fileviewer *.gif
        \ vifmimg gifpreview %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear
" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype {*.torrent},<application/x-bittorrent> ktorrent %f &
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c

" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
        \<application/zip,application/java-archive>
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,*.tzst},
        \<application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.xz,*.txz tar -tJf %c
fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
fileviewer {*.tar},<application/x-tar> tar -tf %c

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c

" IsoMount
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt,*.rtf,*.csv},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,


fileviewer *.pdf
    \ zathura pdf %px %py %pw %ph %c
    \ %pc
    \ zathura clear

fileviewer *.djvu
    \ vifmimg djvu %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.epub
    \ vifmimg epub %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer <video/*>
    \ vifmimg video %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer <image/*>
    \ vifmimg draw %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer <audio/*>
    \ vifmimg audio %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer <font/*>
    \ vifmimg font %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer %"f &

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------

" Sample mappings


" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" Ranger devicons for ViFM
" https://github.com/cirala/vifm_devicons

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp,*.py highlight -O xterm256 -s dante --syntax c %c
fileviewer *.py highlight -O xterm256 --syntax python
fileviewer *.json highlight -O xterm256 --syntax json
fileviewer *.sh highlight -O xterm256 --syntax bash
fileviewer *.xml highlight -O xterm256 --syntax xml 
fileviewer *.html highlight -O HTML5 --syntax html
fileviewer *.opf highlight -O xterm256 --syntax xml 
fileviewer *.md highlight -O xterm256 --syntax markdown
fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
fileviewer *.html,*.go,*.css,*.c, *.php, *.py highlight -O HTML5 -s dante %c
